{"version":3,"sources":["Start.js","Questions.js","App.js","index.js"],"names":["Start","props","className","onClick","handleClick","xmlns","viewBox","fill","d","Questions","answerButtons","answer","map","answers","styles","backgroundColor","isSelected","checkStyle","isCorrect","opacity","pointerEvents","style","check","id","questionId","question","App","React","useState","toggled","setToggled","questions","setQuestions","answerCheck","setAnswerCheck","score","setScore","getData","fetch","then","res","json","data","dataArray","results","b64ToUTF8","nanoid","incorrect_answers","correct_answer","sort","Math","random","str","decodeURIComponent","escape","window","atob","selectAnswer","prevQuestions","quest","triviaData","trivia","forEach","prevScore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.948877e0.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Start(props){\n    return (\n        <>\n        <div className=\"start-container\">\n            <h1>Quizzical</h1>\n            <button onClick={props.handleClick}>Start Game!</button>\n        </div>\n        <svg className=\"start-svg\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1440 320\">\n        <path fill=\"#a2d9ff\" fill-opacity=\"1\" d=\"M0,96L1440,288L1440,320L0,320Z\"></path>\n        </svg>\n        </>\n    )\n}","import React from \"react\";\n\nexport default function Questions(props){\n    const answerButtons = props.answer.map(answers => {\n        const styles = {\n            backgroundColor: answers.isSelected ? \"#59E391\" : \"white\"\n        }\n        const checkStyle = {\n            backgroundColor: \n            answers.isSelected && answers.isCorrect ? \"#77d48a\"\n            : answers.isSelected && !answers.isCorrect ? \"#ed9898\"\n            : !answers.isSelected && answers.isCorrect ? \"#76f590\"\n            : \"none\",\n            opacity: !answers.isCorrect ? \"0.65\" : \"1\",\n            pointerEvents: \"none\"\n        }\n        return (\n            <>\n            <button\n                className=\"quiz-btn\"\n                style={props.check ? checkStyle : styles}\n                key={answers.id}\n                onClick={() => props.handleClick(answers.id, props.questionId)}\n            >\n            {answers.answer}\n            </button>\n            </>\n        )\n    })\n    \n    return (\n        <div className=\"questions-container\">\n            <h4>{props.question}</h4>\n            <span>{answerButtons}</span>\n        </div>\n    )\n}","import React from \"react\";\nimport Start from \"./Start\";\nimport Questions from \"./Questions\";\nimport {nanoid} from \"nanoid\";\n\n\nexport default function App(){\n    const [toggled, setToggled] = React.useState(false);\n    const [questions, setQuestions] = React.useState([]);\n    const [answerCheck, setAnswerCheck] = React.useState(false);\n    const [score, setScore] = React.useState(0);\n    \n    function setToggle(){\n        setToggled(!toggled)\n        getData()\n    }\n    \n    function getData(){\n        fetch(\"https://opentdb.com/api.php?amount=5&encode=base64\")\n            .then(res => res.json())\n            .then(data => {\n                const dataArray = data.results.map(question => {\n                    return {\n                    question: b64ToUTF8(question.question),\n                    id: nanoid(),\n                    answers: [\n                        ...question.incorrect_answers.map((answer) => ({\n                            answer: b64ToUTF8(answer),\n                            isCorrect: false,\n                            isSelected: false,\n                            id: nanoid()\n                        })),\n                        {\n                            answer: b64ToUTF8(question.correct_answer),\n                            isCorrect: true,\n                            isSelected: false,\n                            id: nanoid()\n                        },\n                    ].sort(() => Math.random() - 0.5)\n                };\n                })\n                setQuestions(dataArray)\n            })\n    }\n    \n    function b64ToUTF8(str){  \n        return decodeURIComponent(escape(window.atob(str)));\n    }\n    \n    function selectAnswer(id, questionId){\n        setQuestions(prevQuestions => prevQuestions.map(question => {\n            return {\n                ...question,\n                answers: question.answers.map(quest => {\n                    return (quest.id === id) ? {...quest, isSelected: !quest.isSelected} \n                    : ((quest.id !== id) && (question.id === questionId)) ? {...quest, isSelected: false} \n                    : quest\n                })\n            }\n        })\n        )\n    }\n        \n    const triviaData = questions.map(trivia => {\n        return (\n            <Questions\n                check={answerCheck}\n                key={trivia.id}\n                question={trivia.question}\n                answer={trivia.answers}\n                questionId={trivia.id}\n                handleClick={selectAnswer}\n            />\n        )\n    })\n    \n    function submit(){\n        if(!answerCheck){\n            questions.forEach(question => {\n                question.answers.forEach(answers => {\n                    return ((answers.isSelected) && (answers.isCorrect)) \n                    ? (setAnswerCheck(true), setScore(prevScore => prevScore + 1)) \n                    : ((answers.isSelected) && (!answers.isCorrect)) \n                    ? (setAnswerCheck(true), setScore(prevScore => prevScore)) : score\n                })\n            })\n        } else {\n            setScore(0);\n            setAnswerCheck(false);\n            getData();\n        }\n    }\n\n    \n    return (\n        <div>\n            {toggled ? \n            \n            <div className=\"container\">\n                {triviaData}\n                <span className=\"submit-btn-container\">\n                <button className=\"submit-btn\"\n                onClick={submit}>{answerCheck ? \"New Game\" : \"Check Score!\"}</button>\n                {answerCheck && <p className=\"rainbow rainbow_text_animated\">You scored: {score}/5</p>}\n                </span>\n            </div>\n            \n            : <Start handleClick={setToggle} />\n            \n            }\n            \n        </div>\n        \n    )\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}